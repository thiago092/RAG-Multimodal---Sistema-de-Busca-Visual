#!/usr/bin/env python3
"""
Setup e Configura√ß√£o Automatizada do Sistema RAG Multimodal
===========================================================

Este script automatiza a instala√ß√£o e configura√ß√£o inicial do sistema.
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def print_header():
    """Imprime cabe√ßalho do script"""
    print("üñºÔ∏è Sistema RAG Multimodal - Setup Automatizado")
    print("=" * 60)
    print("Trabalho de Estrutura de Dados")
    print("=" * 60)

def check_python_version():
    """Verifica vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} OK")
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = [
        "images",
        "index", 
        "cache",
        "results"
    ]
    
    for dir_name in directories:
        path = Path(dir_name)
        path.mkdir(exist_ok=True)
        print(f"   ‚úÖ {dir_name}/")

def install_requirements():
    """Instala depend√™ncias"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        # Atualizar pip
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        
        # Instalar requirements
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def check_cuda():
    """Verifica disponibilidade de CUDA"""
    print("\nüîç Verificando CUDA...")
    
    try:
        import torch
        if torch.cuda.is_available():
            print("‚úÖ CUDA dispon√≠vel!")
            print(f"   Dispositivos: {torch.cuda.device_count()}")
            for i in range(torch.cuda.device_count()):
                print(f"   - {torch.cuda.get_device_name(i)}")
            return True
        else:
            print("‚ÑπÔ∏è CUDA n√£o dispon√≠vel (usando CPU)")
            return False
    except ImportError:
        print("‚ö†Ô∏è PyTorch n√£o instalado ainda")
        return False

def create_env_file():
    """Cria arquivo .env de exemplo"""
    print("\n‚öôÔ∏è Criando arquivo de configura√ß√£o...")
    
    env_content = """# Configura√ß√£o do Sistema RAG Multimodal
# =====================================

# Google Gemini API Key (opcional)
# Obtenha em: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=

# Usar GPU se dispon√≠vel
USE_CUDA=false

# Configura√ß√µes de desenvolvimento
DEBUG=false
LOG_LEVEL=INFO

# Configura√ß√µes de interface
STREAMLIT_THEME=light
"""
    
    env_path = Path(".env")
    if not env_path.exists():
        with open(env_path, "w") as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado")
        print("   Configure GEMINI_API_KEY para usar LLM real")
    else:
        print("‚ÑπÔ∏è Arquivo .env j√° existe")

def test_imports():
    """Testa importa√ß√µes principais"""
    print("\nüß™ Testando importa√ß√µes...")
    
    modules = [
        ("streamlit", "Streamlit"),
        ("torch", "PyTorch"),
        ("clip", "CLIP"),
        ("hnswlib", "HNSW"),
        ("PIL", "Pillow"),
        ("numpy", "NumPy"),
        ("pandas", "Pandas"),
        ("matplotlib", "Matplotlib"),
        ("plotly", "Plotly")
    ]
    
    failed = []
    
    for module, name in modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {name}")
        except ImportError as e:
            print(f"   ‚ùå {name}: {e}")
            failed.append(name)
    
    if failed:
        print(f"\n‚ö†Ô∏è M√≥dulos com problemas: {', '.join(failed)}")
        return False
    else:
        print("\n‚úÖ Todas as importa√ß√µes OK!")
        return True

def create_sample_images():
    """Cria imagens de exemplo se necess√°rio"""
    print("\nüé® Verificando imagens de exemplo...")
    
    images_dir = Path("images")
    existing_images = list(images_dir.glob("*"))
    
    if existing_images:
        print(f"‚úÖ Encontradas {len(existing_images)} imagens")
        return
    
    print("Criando imagens de exemplo...")
    
    try:
        from PIL import Image, ImageDraw, ImageFont
        import random
        
        # Cores e formas
        cores = ["red", "blue", "green", "yellow", "purple", "orange"]
        formas = ["circle", "square", "triangle"]
        
        for i in range(6):
            # Criar imagem
            img = Image.new('RGB', (300, 300), 'white')
            draw = ImageDraw.Draw(img)
            
            # Desenhar forma aleat√≥ria
            cor = random.choice(cores)
            forma = random.choice(formas)
            
            if forma == "circle":
                draw.ellipse([50, 50, 250, 250], fill=cor)
            elif forma == "square":
                draw.rectangle([50, 50, 250, 250], fill=cor)
            else:  # triangle
                draw.polygon([(150, 50), (50, 250), (250, 250)], fill=cor)
            
            # Adicionar texto
            try:
                font = ImageFont.load_default()
                draw.text((10, 10), f"{cor} {forma}", fill="black", font=font)
            except:
                draw.text((10, 10), f"{cor} {forma}", fill="black")
            
            # Salvar
            filename = f"exemplo_{i+1:02d}_{cor}_{forma}.png"
            img.save(images_dir / filename)
        
        print(f"‚úÖ Criadas 6 imagens de exemplo")
    
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao criar imagens: {e}")

def test_system():
    """Testa o sistema b√°sico"""
    print("\nüöÄ Testando sistema b√°sico...")
    
    try:
        # Importar sistema
        from rag_system import RAGMultimodalSystem
        
        # Criar sistema
        system = RAGMultimodalSystem()
        
        # Testar inicializa√ß√£o
        system.initialize_components()
        
        # Verificar status
        status = system.get_system_status()
        
        print("‚úÖ Sistema inicializado com sucesso!")
        print(f"   - Imagens encontradas: {status['images_found']}")
        print(f"   - Componentes OK: {sum(status['components'].values())}/4")
        
        return True
    
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def print_next_steps():
    """Imprime pr√≥ximos passos"""
    print("\nüéØ Pr√≥ximos Passos")
    print("=" * 30)
    print()
    print("1. üöÄ Executar a aplica√ß√£o:")
    print("   streamlit run app.py")
    print()
    print("2. üì± Acessar no navegador:")
    print("   http://localhost:8501")
    print()
    print("3. üñºÔ∏è Adicionar suas imagens:")
    print("   - Coloque imagens na pasta 'images/'")
    print("   - Formatos: JPG, PNG, BMP, TIFF, WEBP")
    print()
    print("4. ü§ñ Configurar LLM (opcional):")
    print("   - Edite o arquivo .env")
    print("   - Adicione sua GEMINI_API_KEY")
    print()
    print("5. üìä Executar exemplo:")
    print("   python exemplo_uso.py")
    print()

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verifica√ß√µes
    if not check_python_version():
        sys.exit(1)
    
    # Criar diret√≥rios
    create_directories()
    
    # Instalar depend√™ncias
    if not install_requirements():
        print("\n‚ùå Instala√ß√£o falhou!")
        sys.exit(1)
    
    # Verificar CUDA
    check_cuda()
    
    # Criar arquivo .env
    create_env_file()
    
    # Testar importa√ß√µes
    if not test_imports():
        print("\n‚ö†Ô∏è Algumas importa√ß√µes falharam, mas o sistema pode funcionar")
    
    # Criar imagens de exemplo
    create_sample_images()
    
    # Testar sistema
    if test_system():
        print("\nüéâ Setup conclu√≠do com sucesso!")
    else:
        print("\n‚ö†Ô∏è Setup conclu√≠do com avisos")
    
    # Pr√≥ximos passos
    print_next_steps()

if __name__ == "__main__":
    main() 